# This file is a part of Julia. License is MIT: https://julialang.org/license

using Test, LinearAlgebra, SparseArrays, SuiteSparse
let ambig = detect_ambiguities(SparseArrays; recursive=true)
    @test_broken isempty(ambig)
    ambig = Set{Any}(((m1.sig, m2.sig) for (m1, m2) in ambig))
    expect = []

    push!(expect, (Tuple{typeof(dot),AbstractVector{Tx},Union{SparseVector{Ty,Ti}, SubArray{Ty,1,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},Int},false} where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{Ty,Ti}, SubArray{Ty,1,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}}},false} where var"#s840"<:AbstractSparseVector{Ty,Ti}} where Ti} where Ty<:Number where Tx<:Number, Tuple{typeof(dot),Union{SparseVector{Tx,Ti}, SubArray{Tx,1,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},Int},false} where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{Tx,Ti}, SubArray{Tx,1,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}}},false} where var"#s840"<:AbstractSparseVector{Tx,Ti}} where Ti,AbstractVector{Ty}} where Ty<:Number where Tx<:Number))
    push!(expect, (Tuple{typeof(hcat),Vararg{AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, Adjoint{var"#s840",var"#s839"} where var"#s839"<:(Vector{T} where T) where var"#s840", Hermitian{T,A} where A<:(Matrix{T} where T) where T, Symmetric{T,A} where A<:(Matrix{T} where T) where T, Transpose{var"#s838",var"#s837"} where var"#s837"<:(Vector{T} where T) where var"#s838"},N} where N}))
    push!(expect, (Tuple{typeof(hcat),Vararg{AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(hcat),Vararg{SparseArrays.AbstractSparseMatrixCSC,N} where N}, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(hcat),Vararg{SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, Adjoint{var"#s840",var"#s839"} where var"#s839"<:(Vector{T} where T) where var"#s840", Hermitian{T,A} where A<:(Matrix{T} where T) where T, Symmetric{T,A} where A<:(Matrix{T} where T) where T, Transpose{var"#s838",var"#s837"} where var"#s837"<:(Vector{T} where T) where var"#s838"},N} where N}))
    push!(expect, (Tuple{typeof(hcat),Vararg{SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T} where T, AbstractSparseVector{Tv,Ti} where Ti where Tv},N} where N}, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{BitVector,N} where N}))
    push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{Number,N} where N}))
    push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{Union{BitMatrix, BitVector},N} where N}))
    push!(expect, (Tuple{typeof(hcat),Vararg{Vector{T} where T,N} where N}, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(hvcat),Tuple{Vararg{Int,N} where N},Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hvcat),Tuple{Vararg{Int,N} where N},Vararg{Number,N} where N}))
    push!(expect, (Tuple{typeof(ldiv!),Adjoint{var"#s803",var"#s802"} where var"#s802"<:(LowerTriangular{T,var"#s801"} where var"#s801"<:(StridedMatrix{T} where T)) where var"#s803",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Adjoint{var"#s803",var"#s802"} where var"#s802"<:(UnitLowerTriangular{T,var"#s801"} where var"#s801"<:(StridedMatrix{T} where T)) where var"#s803",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Adjoint{var"#s803",var"#s802"} where var"#s802"<:(UnitUpperTriangular{T,var"#s801"} where var"#s801"<:(StridedMatrix{T} where T)) where var"#s803",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Adjoint{var"#s803",var"#s802"} where var"#s802"<:(UpperTriangular{T,var"#s801"} where var"#s801"<:(StridedMatrix{T} where T)) where var"#s803",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Adjoint{var"#s840",var"#s839"} where var"#s839"<:(Diagonal{T,V} where V<:AbstractVector{T}) where var"#s840",AbstractVecOrMat{T}} where T, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Adjoint{var"#s840",var"#s839"} where var"#s839"<:(LU{var"#s838",var"#s837"} where var"#s837"<:(StridedMatrix{T} where T) where var"#s838") where var"#s840",StridedVecOrMat{T} where T}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Adjoint{var"#s840",var"#s839"} where var"#s839"<:Hessenberg where var"#s840",AbstractVecOrMat{T} where T}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Transpose{var"#s809",var"#s808"} where var"#s808"<:(LowerTriangular{T,var"#s807"} where var"#s807"<:(StridedMatrix{T} where T)) where var"#s809",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Transpose{var"#s809",var"#s808"} where var"#s808"<:(UnitLowerTriangular{T,var"#s807"} where var"#s807"<:(StridedMatrix{T} where T)) where var"#s809",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Transpose{var"#s809",var"#s808"} where var"#s808"<:(UnitUpperTriangular{T,var"#s807"} where var"#s807"<:(StridedMatrix{T} where T)) where var"#s809",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Transpose{var"#s809",var"#s808"} where var"#s808"<:(UpperTriangular{T,var"#s807"} where var"#s807"<:(StridedMatrix{T} where T)) where var"#s809",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Transpose{var"#s840",var"#s839"} where var"#s839"<:(Diagonal{T,V} where V<:AbstractVector{T}) where var"#s840",AbstractVecOrMat{T}} where T, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Transpose{var"#s840",var"#s839"} where var"#s839"<:(LU{var"#s838",var"#s837"} where var"#s837"<:(StridedMatrix{T} where T) where var"#s838") where var"#s840",StridedVecOrMat{T} where T}, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(ldiv!),Transpose{var"#s840",var"#s839"} where var"#s839"<:LU{T,Tridiagonal{T,V}} where var"#s840",AbstractVecOrMat{T} where T} where V where T, Tuple{typeof(ldiv!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(lmul!),Adjoint{var"#s840",var"#s839"} where var"#s839"<:LinearAlgebra.QRPackedQ where var"#s840",AbstractVecOrMat{T} where T}, Tuple{typeof(lmul!),Union{Adjoint{T,var"#s840"} where var"#s840"<:(UpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitUpperTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s840"} where var"#s840"<:(LowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Adjoint{T,var"#s838"} where var"#s838"<:(UnitLowerTriangular{T,var"#s837"} where var"#s837"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LowerTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), Transpose{T,var"#s836"} where var"#s836"<:(UpperTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitUpperTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s836"} where var"#s836"<:(LowerTriangular{T,var"#s835"} where var"#s835"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), Transpose{T,var"#s834"} where var"#s834"<:(UnitLowerTriangular{T,var"#s833"} where var"#s833"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), UnitLowerTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UnitUpperTriangular{T,var"#s839"} where var"#s839"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), UpperTriangular{T,var"#s840"} where var"#s840"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s840",Tuple{Base.Slice{Base.OneTo{Int}},I},L} where L where var"#s840"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
    push!(expect, (Tuple{typeof(mul!),StridedMatrix{T},StridedVecOrMat{T},Transpose{var"#s840",var"#s839"} where var"#s839"<:StridedVecOrMat{T} where var"#s840",Number,Number} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(mul!),StridedVecOrMat{T} where T,Union{Adjoint{var"#s840",var"#s839"} where var"#s839"<:Union{LowerTriangular{T,S} where S<:AbstractMatrix{T}, UnitLowerTriangular{T,S} where S<:AbstractMatrix{T}, UnitUpperTriangular{T,S} where S<:AbstractMatrix{T}, UpperTriangular{T,S} where S<:AbstractMatrix{T}, StridedArray{T,2}} where var"#s840", LowerTriangular{T,S} where S<:AbstractMatrix{T}, Transpose{var"#s838",var"#s837"} where var"#s837"<:Union{LowerTriangular{T,S} where S<:AbstractMatrix{T}, UnitLowerTriangular{T,S} where S<:AbstractMatrix{T}, UnitUpperTriangular{T,S} where S<:AbstractMatrix{T}, UpperTriangular{T,S} where S<:AbstractMatrix{T}, StridedArray{T,2}} where var"#s838", UnitLowerTriangular{T,S} where S<:AbstractMatrix{T}, UnitUpperTriangular{T,S} where S<:AbstractMatrix{T}, UpperTriangular{T,S} where S<:AbstractMatrix{T}, StridedArray{T,2}} where T,Transpose{var"#s840",var"#s839"} where var"#s839"<:SparseArrays.AbstractSparseMatrixCSC where var"#s840",Number,Number}))
    push!(expect, (Tuple{typeof(vcat),Vararg{AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, Adjoint{var"#s840",var"#s839"} where var"#s839"<:(Vector{T} where T) where var"#s840", Hermitian{T,A} where A<:(Matrix{T} where T) where T, Symmetric{T,A} where A<:(Matrix{T} where T) where T, Transpose{var"#s838",var"#s837"} where var"#s837"<:(Vector{T} where T) where var"#s838"},N} where N}))
    push!(expect, (Tuple{typeof(vcat),Vararg{AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{SparseArrays.AbstractSparseMatrixCSC,N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{SparseVector,N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, Adjoint{var"#s840",var"#s839"} where var"#s839"<:(Vector{T} where T) where var"#s840", Hermitian{T,A} where A<:(Matrix{T} where T) where T, Symmetric{T,A} where A<:(Matrix{T} where T) where T, Transpose{var"#s838",var"#s837"} where var"#s837"<:(Vector{T} where T) where var"#s838"},N} where N}))
    push!(expect, (Tuple{typeof(vcat),Vararg{SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, AbstractSparseVector{Tv,Ti} where Ti where Tv},N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, Adjoint{var"#s840",var"#s839"} where var"#s839"<:(Vector{T} where T) where var"#s840", Hermitian{T,A} where A<:(Matrix{T} where T) where T, Symmetric{T,A} where A<:(Matrix{T} where T) where T, Transpose{var"#s838",var"#s837"} where var"#s837"<:(Vector{T} where T) where var"#s838"},N} where N}, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:Union{Adjoint{var"#s840",var"#s839"} where var"#s839"<:SparseVector where var"#s840", Bidiagonal, Diagonal, SymTridiagonal, Transpose{var"#s838",var"#s837"} where var"#s837"<:SparseVector where var"#s838", Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseVector} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, Adjoint{var"#s840",var"#s839"} where var"#s839"<:(Vector{T} where T) where var"#s840", Adjoint{var"#s840",var"#s839"} where var"#s839"<:SparseVector where var"#s840", Bidiagonal, Diagonal, Hermitian{T,A} where A<:Union{Adjoint{var"#s840",var"#s839"} where var"#s839"<:SparseVector where var"#s840", Bidiagonal, Diagonal, SymTridiagonal, Transpose{var"#s838",var"#s837"} where var"#s837"<:SparseVector where var"#s838", Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseVector} where T, Hermitian{T,A} where A<:(Matrix{T} where T) where T, SymTridiagonal, Symmetric{T,A} where A<:Union{Adjoint{var"#s840",var"#s839"} where var"#s839"<:SparseVector where var"#s840", Bidiagonal, Diagonal, SymTridiagonal, Transpose{var"#s838",var"#s837"} where var"#s837"<:SparseVector where var"#s838", Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseVector} where T, Symmetric{T,A} where A<:(Matrix{T} where T) where T, Transpose{var"#s838",var"#s837"} where var"#s837"<:(Vector{T} where T) where var"#s838", Transpose{var"#s838",var"#s837"} where var"#s837"<:SparseVector where var"#s838", Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseVector},N} where N}, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, SparseVector},N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{BitMatrix,N} where N}))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{BitVector,N} where N}))
    push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{Number,N} where N}))
    push!(expect, (Tuple{typeof(vcat),Vararg{Vector{T} where T,N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, Adjoint{T,Vector{T}}, Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), Hermitian{T,A} where A<:(Matrix{T} where T), Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
    good = true
    while !isempty(ambig)
        sigs = pop!(ambig)
        i = findfirst(==(sigs), expect)
        if i === nothing
            println(stderr, "push!(expect, (", sigs[1], ", ", sigs[2], "))")
            good = false
            continue
        end
        deleteat!(expect, i)
    end
    @test good
    @test isempty(expect)
end
