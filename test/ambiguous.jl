# This file is a part of Julia. License is MIT: https://julialang.org/license

using Base: get_world_counter

# DO NOT ALTER ORDER OR SPACING OF METHODS BELOW
const lineoffset = @__LINE__
ambig(x, y) = 1
ambig(x::Integer, y) = 2
ambig(x, y::Integer) = 3
ambig(x::Int, y::Int) = 4
ambig(x::Number, y) = 5
# END OF LINE NUMBER SENSITIVITY

# For curmod_*
include("testenv.jl")

@test length(methods(ambig)) == 5
@test length(Base.methods_including_ambiguous(ambig, Tuple)) == 5

@test length(methods(ambig, (Int, Int))) == 1
@test length(methods(ambig, (UInt8, Int))) == 0
@test length(Base.methods_including_ambiguous(ambig, (UInt8, Int))) == 3

@test ambig("hi", "there") == 1
@test ambig(3.1, 3.2) == 5
@test ambig(3, 4) == 4
@test_throws MethodError ambig(0x03, 4)
@test_throws MethodError ambig(0x03, 4)  # test that not inserted into cache

# Ensure it still works with potential inlining
callambig(x, y) = ambig(x, y)
@test_throws MethodError callambig(0x03, 4)

# Printing ambiguity errors
let err = try
              ambig(0x03, 4)
          catch _e_
              _e_
          end
    io = IOBuffer()
    Base.showerror(io, err)
    lines = split(String(take!(io)), '\n')
    ambig_checkline(str) = startswith(str, "  ambig(x, y::Integer) in $curmod_str at") ||
                           startswith(str, "  ambig(x::Integer, y) in $curmod_str at") ||
                           startswith(str, "  ambig(x::Number, y) in $curmod_str at")
    @test ambig_checkline(lines[2])
    @test ambig_checkline(lines[3])
    @test ambig_checkline(lines[4])
    @test lines[5] == "Possible fix, define"
    @test lines[6] == "  ambig(::Integer, ::Integer)"
end

ambig_with_bounds(x, ::Int, ::T) where {T<:Integer,S} = 0
ambig_with_bounds(::Int, x, ::T) where {T<:Integer,S} = 1
let err = try
              ambig_with_bounds(1, 2, 3)
          catch _e_
              _e_
          end
    io = IOBuffer()
    Base.showerror(io, err)
    lines = split(String(take!(io)), '\n')
    @test lines[end] == "  ambig_with_bounds(::$Int, ::$Int, ::T) where T<:Integer"
end

## Other ways of accessing functions
# Test that non-ambiguous cases work
let io = IOBuffer()
    @test precompile(ambig, (Int, Int)) == true
    cf = @eval @cfunction(ambig, Int, (Int, Int))
    @test ccall(cf, Int, (Int, Int), 1, 2) == 4
    @test length(code_lowered(ambig, (Int, Int))) == 1
    @test length(code_typed(ambig, (Int, Int))) == 1
end

# Test that ambiguous cases fail appropriately
let io = IOBuffer()
    @test precompile(ambig, (UInt8, Int)) == false
    cf = @eval @cfunction(ambig, Int, (UInt8, Int))  # test for a crash (doesn't throw an error)
    @test_throws(MethodError(ambig, (UInt8(1), Int(2)), get_world_counter()),
                 ccall(cf, Int, (UInt8, Int), 1, 2))
    @test_throws(ErrorException("no unique matching method found for the specified argument types"),
                 which(ambig, (UInt8, Int)))
    @test length(code_typed(ambig, (UInt8, Int))) == 0
end

# Method overwriting doesn't destroy ambiguities
@test_throws MethodError ambig(2, 0x03)
ambig(x, y::Integer) = 3
@test_throws MethodError ambig(2, 0x03)

# Method overwriting by an ambiguity should also invalidate the method cache (#21963)
ambig(x::Union{Char, Int8}) = 'r'
@test ambig('c') == 'r'
@test ambig(Int8(1)) == 'r'
@test_throws MethodError ambig(Int16(1))
ambig(x::Union{Char, Int16}) = 's'
@test_throws MethodError ambig('c')
@test ambig(Int8(1)) == 'r'
@test ambig(Int16(1)) == 's'

# Automatic detection of ambiguities
module Ambig1
ambig(x, y) = 1
ambig(x::Integer, y) = 2
ambig(x, y::Integer) = 3
end

ambs = detect_ambiguities(Ambig1)
@test length(ambs) == 1

module Ambig2
ambig(x, y) = 1
ambig(x::Integer, y) = 2
ambig(x, y::Integer) = 3
ambig(x::Number, y) = 4
end

ambs = detect_ambiguities(Ambig2)
@test length(ambs) == 2

module Ambig3
ambig(x, y) = 1
ambig(x::Integer, y) = 2
ambig(x, y::Integer) = 3
ambig(x::Int, y::Int) = 4
end

ambs = detect_ambiguities(Ambig3)
@test length(ambs) == 1

module Ambig4
ambig(x, y) = 1
ambig(x::Int, y) = 2
ambig(x, y::Int) = 3
ambig(x::Int, y::Int) = 4
end
ambs = detect_ambiguities(Ambig4)
@test length(ambs) == 0

module Ambig5
ambig(x::Int8, y) = 1
ambig(x::Integer, y) = 2
ambig(x, y::Int) = 3
end

ambs = detect_ambiguities(Ambig5)
@test length(ambs) == 2


using LinearAlgebra, SparseArrays, SuiteSparse

# Test that Core and Base are free of ambiguities
# not using isempty so this prints more information when it fails
@testset "detect_ambiguities" begin
    let ambig = Set{Any}(((m1.sig, m2.sig) for (m1, m2) in detect_ambiguities(Core, Base; recursive=true, ambiguous_bottom=false)))
        @test_broken isempty(ambig)
        # this is basically just a list of everything for which typeintersection is too conservative,
        # and ends up matching some methods that don't actually have an interesting intersection
        expect = []
        push!(expect, (Tuple{typeof(convert),Type{T},Any} where T>:Union{Missing, Nothing}, Tuple{typeof(convert),Type{T},T} where T>:Nothing))
        push!(expect, (Tuple{typeof(convert),Type{T},T} where T, Tuple{typeof(convert),Type{T},Any} where T>:Missing))
        push!(expect, (Tuple{typeof(convert),Type{T},T} where T, Tuple{typeof(convert),Type{T},Any} where T>:Nothing))
        push!(expect, (Tuple{typeof(convert),Type{T},T} where T, Tuple{typeof(convert),Type{T},Any} where T>:Union{Missing, Nothing}))
        push!(expect, (Tuple{typeof(convert),Type{T},T} where T>:Missing, Tuple{typeof(convert),Type{T},Any} where T>:Union{Missing, Nothing}))
        push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{BitVector,N} where N}))
        push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{Number,N} where N}))
        push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{Union{BitMatrix, BitVector},N} where N}))
        push!(expect, (Tuple{typeof(hvcat),Tuple{Vararg{Int64,N} where N},Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hvcat),Tuple{Vararg{Int64,N} where N},Vararg{Number,N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.AbstractTriangular{T,A} where A<:Union{LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Hermitian{T,A} where A<:Union{LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.SymTridiagonal, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:Union{LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847", LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector},N} where N}, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847"},N} where N}, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{BitMatrix,N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{BitVector,N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{Number,N} where N}))
        while !isempty(ambig)
            sigs = pop!(ambig)
            i = findfirst(==(sigs), expect)
            if i === nothing
                println("push!(expect, (", sigs[1], ", ", sigs[2], "))")
                continue
            end
            deleteat!(expect, i)
        end
        @test isempty(expect)
    end

    # some ambiguities involving Union{} type parameters are expected, but not required
    let ambig = Set(detect_ambiguities(Core; recursive=true, ambiguous_bottom=true))
        @test !isempty(ambig)
    end

    # List standard libraries. Exclude modules such as Main, Base, and Core.
    let modules = [mod for (pkg, mod) in Base.loaded_modules if pkg.uuid !== nothing]
        ambig = Set{Any}(((m1.sig, m2.sig) for (m1, m2) in detect_ambiguities(modules...; recursive=true)))
        expect = []
        push!(expect, (Tuple{typeof(LinearAlgebra.dot),AbstractVector{Tx},Union{SparseArrays.SparseVector{Ty,Ti}, SubArray{Ty,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},Int64},false} where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{Ty,Ti}, SubArray{Ty,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}}},false} where var"#s849"<:SparseArrays.AbstractSparseVector{Ty,Ti}} where Ti} where Ty<:Number where Tx<:Number, Tuple{typeof(LinearAlgebra.dot),Union{SparseArrays.SparseVector{Tx,Ti}, SubArray{Tx,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},Int64},false} where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{Tx,Ti}, SubArray{Tx,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}}},false} where var"#s849"<:SparseArrays.AbstractSparseVector{Tx,Ti}} where Ti,AbstractVector{Ty}} where Ty<:Number where Tx<:Number))
        push!(expect, (Tuple{typeof(LinearAlgebra.dot),Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N},Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.dot),AbstractVector{Tx},Union{SparseArrays.SparseVector{Ty,Ti}, SubArray{Ty,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},Int64},false} where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{Ty,Ti}, SubArray{Ty,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}}},false} where var"#s849"<:SparseArrays.AbstractSparseVector{Ty,Ti}} where Ti} where Ty<:Number where Tx<:Number))
        push!(expect, (Tuple{typeof(LinearAlgebra.dot),Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N},Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.dot),Union{SparseArrays.SparseVector{Tx,Ti}, SubArray{Tx,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},Int64},false} where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{Tx,Ti}, SubArray{Tx,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}}},false} where var"#s849"<:SparseArrays.AbstractSparseVector{Tx,Ti}} where Ti,AbstractVector{Ty}} where Ty<:Number where Tx<:Number))
        push!(expect, (Tuple{typeof(LinearAlgebra.dot),Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N},Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.dot),AbstractVector{Tx},Union{SparseArrays.SparseVector{Ty,Ti}, SubArray{Ty,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},Int64},false} where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{Ty,Ti}, SubArray{Ty,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}}},false} where var"#s849"<:SparseArrays.AbstractSparseVector{Ty,Ti}} where Ti} where Ty<:Number where Tx<:Number))
        push!(expect, (Tuple{typeof(LinearAlgebra.dot),Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N},Union{DenseVector{T}, Base.ReinterpretArray{T,1,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, Base.ReshapedArray{T,1,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray}, SubArray{T,1,A,I,L} where L where I<:Tuple{Vararg{Union{Int64, AbstractRange{Int64}, Base.AbstractCartesianIndex, Base.ReshapedArray{T,N,A,Tuple{}} where A<:AbstractUnitRange where N where T},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, Base.ReshapedArray{T,N,A,MI} where MI<:Tuple{Vararg{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},N} where N} where A<:Union{Base.ReinterpretArray{T,N,S,A} where S where A<:Union{SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, SubArray{T,N,A,I,true} where I<:Union{Tuple{Vararg{Real,N} where N}, Tuple{AbstractUnitRange,Vararg{Any,N} where N}} where A<:DenseArray where N where T, DenseArray} where N where T, DenseArray}, DenseArray{T,N} where N}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.dot),Union{SparseArrays.SparseVector{Tx,Ti}, SubArray{Tx,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},Int64},false} where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{Tx,Ti}, SubArray{Tx,1,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}}},false} where var"#s849"<:SparseArrays.AbstractSparseVector{Tx,Ti}} where Ti,AbstractVector{Ty}} where Ty<:Number where Tx<:Number))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LU{T,var"#s848"} where var"#s848"<:(StridedMatrix{T} where T)),StridedVecOrMat{T}} where T<:Real, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{T,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{T}} where T<:Union{Float64, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{T,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{T}} where T<:Union{Float64, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{T,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{T}} where T<:Union{Float64, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{T,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{T}} where T<:Union{Float64, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Bidiagonal where var"#s849",AbstractVector{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.LowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s812",var"#s811"} where var"#s811"<:(LinearAlgebra.UpperTriangular{T,var"#s810"} where var"#s810"<:(StridedMatrix{T} where T)) where var"#s812",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.LowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s815",var"#s814"} where var"#s814"<:(LinearAlgebra.UpperTriangular{T,var"#s813"} where var"#s813"<:(StridedMatrix{T} where T)) where var"#s815",StridedVecOrMat{T}} where T<:Union{Float32, Float64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Hessenberg where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.LowerTriangular{T,var"#s819"} where var"#s819"<:(StridedMatrix{T} where T),StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{Float64,var"#s849"} where var"#s849"<:(SuiteSparse.UMFPACK.UmfpackLU{Float64,Ti} where Ti<:Union{Int32, Int64}),StridedVecOrMat{var"#s848"} where var"#s848"<:Complex}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.Diagonal{T,V} where V<:AbstractVector{T}) where var"#s849",AbstractVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LU{var"#s847",var"#s846"} where var"#s846"<:(StridedMatrix{T} where T) where var"#s847") where var"#s849",StridedVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Bidiagonal where var"#s849",AbstractVector{T} where T}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LU{T,LinearAlgebra.Tridiagonal{T,V}} where var"#s849",AbstractVecOrMat{T} where T} where V where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.LowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LU{T,LinearAlgebra.Tridiagonal{T,V}} where var"#s849",AbstractVecOrMat{T} where T} where V where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LU{T,LinearAlgebra.Tridiagonal{T,V}} where var"#s849",AbstractVecOrMat{T} where T} where V where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LU{T,LinearAlgebra.Tridiagonal{T,V}} where var"#s849",AbstractVecOrMat{T} where T} where V where T, Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s818",var"#s817"} where var"#s817"<:(LinearAlgebra.UpperTriangular{T,var"#s816"} where var"#s816"<:(StridedMatrix{T} where T)) where var"#s818",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LU{T,LinearAlgebra.Tridiagonal{T,V}} where var"#s849",AbstractVecOrMat{T} where T} where V where T, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.UnitLowerTriangular{T,var"#s819"} where var"#s819"<:(StridedMatrix{T} where T),StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.UnitUpperTriangular{T,var"#s819"} where var"#s819"<:(StridedMatrix{T} where T),StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.ldiv!),LinearAlgebra.UpperTriangular{T,var"#s819"} where var"#s819"<:(StridedMatrix{T} where T),StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.ldiv!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",false} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",false} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ where var"#s849",AbstractVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",false} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",false} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",false} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",true} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",true} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ where var"#s849",AbstractVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",true} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",true} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.HessenbergQ{T,var"#s849",var"#s848",true} where var"#s848"<:StridedVector{T} where var"#s849"<:StridedMatrix{T}) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ where var"#s849",AbstractVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ where var"#s849",AbstractVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(LinearAlgebra.LQPackedQ{T,S} where S<:(AbstractMatrix{T} where T)) where var"#s849",StridedVecOrMat{T}} where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ where var"#s849",AbstractVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ where var"#s849",AbstractVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRCompactWYQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ where var"#s849",AbstractVecOrMat{T} where T}, Tuple{typeof(LinearAlgebra.lmul!),Union{LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.LowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s849"} where var"#s849"<:(LinearAlgebra.UpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Adjoint{T,var"#s847"} where var"#s847"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s846"} where var"#s846"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.LowerTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.UpperTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitLowerTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s845"} where var"#s845"<:(LinearAlgebra.LowerTriangular{T,var"#s844"} where var"#s844"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.Transpose{T,var"#s843"} where var"#s843"<:(LinearAlgebra.UnitUpperTriangular{T,var"#s842"} where var"#s842"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)), LinearAlgebra.UnitLowerTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UnitUpperTriangular{T,var"#s848"} where var"#s848"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti), LinearAlgebra.UpperTriangular{T,var"#s849"} where var"#s849"<:(Union{SparseArrays.AbstractSparseMatrixCSC{T,Ti}, SubArray{T,2,var"#s849",Tuple{Base.Slice{Base.OneTo{Int64}},I},L} where L where var"#s849"<:SparseArrays.AbstractSparseMatrixCSC{T,Ti} where I<:AbstractUnitRange} where Ti)},StridedVecOrMat{T}} where T))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.LowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitLowerTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UnitUpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.QRPackedQ{T,S} where var"#s849",StridedVecOrMat{T}} where S<:(StridedMatrix{T} where T) where T<:Union{Float32, Float64}, Tuple{typeof(LinearAlgebra.lmul!),LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.UpperTriangular where var"#s849",StridedVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.mul!),AbstractMatrix{T} where T,StridedMatrix{T} where T,LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.Diagonal where var"#s849",Number,Number}, Tuple{typeof(LinearAlgebra.mul!),StridedMatrix{T},StridedVecOrMat{T},LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:StridedVecOrMat{T} where var"#s849",Number,Number} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}))
        push!(expect, (Tuple{typeof(LinearAlgebra.mul!),StridedMatrix{T},StridedVecOrMat{T},LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:StridedVecOrMat{T} where var"#s849",Number,Number} where T<:Union{Float32, Float64, ComplexF32, ComplexF64}, Tuple{typeof(LinearAlgebra.mul!),StridedVecOrMat{T} where T,Union{LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:Union{LinearAlgebra.LowerTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UnitLowerTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UnitUpperTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UpperTriangular{T,S} where S<:AbstractMatrix{T}, StridedArray{T,2}} where var"#s849", LinearAlgebra.LowerTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:Union{LinearAlgebra.LowerTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UnitLowerTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UnitUpperTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UpperTriangular{T,S} where S<:AbstractMatrix{T}, StridedArray{T,2}} where var"#s847", LinearAlgebra.UnitLowerTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UnitUpperTriangular{T,S} where S<:AbstractMatrix{T}, LinearAlgebra.UpperTriangular{T,S} where S<:AbstractMatrix{T}, StridedArray{T,2}} where T,LinearAlgebra.Transpose{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.AbstractSparseMatrixCSC where var"#s849",Number,Number}))
        push!(expect, (Tuple{typeof(LinearAlgebra.mul!),StridedVecOrMat{T},LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.AbstractQ{T} where var"#s849",StridedVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.mul!),AbstractVecOrMat{T} where T,LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.AbstractTriangular where var"#s849",AbstractVecOrMat{T} where T}))
        push!(expect, (Tuple{typeof(LinearAlgebra.mul!),StridedVecOrMat{T},LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.AbstractQ{T} where var"#s849",StridedVecOrMat{T}} where T, Tuple{typeof(LinearAlgebra.mul!),AbstractVector{T} where T,LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:LinearAlgebra.AbstractTriangular where var"#s849",AbstractVector{T} where T}))
        push!(expect, (Tuple{typeof(\),LinearAlgebra.Factorization{T},Union{Array{Complex{T},1}, Array{Complex{T},2}}} where T<:Union{Float32, Float64}, Tuple{typeof(\),LinearAlgebra.LQ{TA,S} where S<:AbstractMatrix{TA},StridedVecOrMat{TB}} where TB where TA))
        push!(expect, (Tuple{typeof(\),LinearAlgebra.Factorization{T},Union{Array{Complex{T},1}, Array{Complex{T},2}}} where T<:Union{Float32, Float64}, Tuple{typeof(\),Union{LinearAlgebra.QR{TA,S} where S<:AbstractMatrix{TA}, LinearAlgebra.QRCompactWY{TA,M} where M<:AbstractMatrix{TA}, LinearAlgebra.QRPivoted{TA,S} where S<:AbstractMatrix{TA}},AbstractVecOrMat{TB}} where TB where TA))
        push!(expect, (Tuple{typeof(hcat),Vararg{SparseArrays.AbstractSparseMatrixCSC,N} where N}, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(hcat),Vararg{SparseArrays.AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847"},N} where N}))
        push!(expect, (Tuple{typeof(hcat),Vararg{SparseArrays.AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(hcat),Vararg{SparseArrays.SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847"},N} where N}))
        push!(expect, (Tuple{typeof(hcat),Vararg{SparseArrays.SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T} where T, SparseArrays.AbstractSparseVector{Tv,Ti} where Ti where Tv},N} where N}, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{BitVector,N} where N}))
        push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{Number,N} where N}))
        push!(expect, (Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hcat),Vararg{Union{BitMatrix, BitVector},N} where N}))
        push!(expect, (Tuple{typeof(hcat),Vararg{Vector{T} where T,N} where N}, Tuple{typeof(hcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(hvcat),Tuple{Vararg{Int64,N} where N},Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(hvcat),Tuple{Vararg{Int64,N} where N},Vararg{Number,N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{SparseArrays.AbstractSparseMatrixCSC,N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{SparseArrays.AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847"},N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{SparseArrays.AbstractSparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{SparseArrays.SparseVector,N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{SparseArrays.SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847"},N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{SparseArrays.SparseVector{Tv,Ti},N} where N} where Ti<:Integer where Tv, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.AbstractTriangular{T,A} where A<:Union{LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Hermitian{T,A} where A<:Union{LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.SymTridiagonal, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:Union{LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:SparseArrays.SparseVector where var"#s849", LinearAlgebra.Bidiagonal, LinearAlgebra.Diagonal, LinearAlgebra.SymTridiagonal, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector} where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847", LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:SparseArrays.SparseVector where var"#s847", LinearAlgebra.Tridiagonal, SparseArrays.AbstractSparseMatrixCSC, SparseArrays.SparseVector},N} where N}, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, Matrix{T} where T, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Adjoint{var"#s849",var"#s848"} where var"#s848"<:(Vector{T} where T) where var"#s849", LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T) where T, LinearAlgebra.Transpose{var"#s847",var"#s846"} where var"#s846"<:(Vector{T} where T) where var"#s847"},N} where N}, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, SparseArrays.AbstractSparseVector{Tv,Ti} where Ti where Tv},N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T} where T, SparseArrays.SparseVector},N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{AbstractRange{T},N} where N} where T))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{BitMatrix,N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{BitVector,N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T, Tuple{typeof(vcat),Vararg{Number,N} where N}))
        push!(expect, (Tuple{typeof(vcat),Vararg{Vector{T} where T,N} where N}, Tuple{typeof(vcat),Vararg{Union{Vector{T}, Matrix{T}, LinearAlgebra.Adjoint{T,Vector{T}}, LinearAlgebra.Transpose{T,Vector{T}}, LinearAlgebra.AbstractTriangular{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Hermitian{T,A} where A<:(Matrix{T} where T), LinearAlgebra.Symmetric{T,A} where A<:(Matrix{T} where T)},N} where N} where T))
        while !isempty(ambig)
            sigs = pop!(ambig)
            i = findfirst(==(sigs), expect)
            if i === nothing
                println("push!(expect, (", sigs[1], ", ", sigs[2], "))")
                continue
            end
            deleteat!(expect, i)
        end
        @test isempty(expect)
    end
end

amb_1(::Int8, ::Int) = 1
amb_1(::Integer, x) = 2
amb_1(x, ::Int) = 3
# if there is an ambiguity with some methods and not others, `methods`
# should return just the non-ambiguous ones, i.e. the ones that could actually
# be called.
@test length(methods(amb_1, Tuple{Integer, Int})) == 1

amb_2(::Int, y) = 1
amb_2(x, ::Int) = 2
amb_2(::Int8, y) = 3
@test length(methods(amb_2)) == 3  # make sure no duplicates

amb_3(::Int8, ::Int8) = 1
amb_3(::Int16, ::Int16) = 2
amb_3(::Integer, ::Integer) = 3
amb_3(::Integer, x) = 4
amb_3(x, ::Integer) = 5
# ambiguous definitions exist, but are covered by multiple more specific definitions
let ms = methods(amb_3).ms
    @test !Base.isambiguous(ms[4], ms[5])
end

amb_4(::Int8, ::Int8) = 1
amb_4(::Int16, ::Int16) = 2
amb_4(::Integer, x) = 4
amb_4(x, ::Integer) = 5
# as above, but without sufficient definition coverage
let ms = methods(amb_4).ms
    @test Base.isambiguous(ms[3], ms[4])
end

g16493(x::T, y::Integer) where {T<:Number} = 0
g16493(x::Complex{T}, y) where {T} = 1
let ms = methods(g16493, (Complex, Any))
    @test length(ms) == 1
    @test first(ms).sig == (Tuple{typeof(g16493), Complex{T}, Any} where T)
end

# issue #17350
module Ambig6
struct ScaleMinMax{To,From} end
map1(mapi::ScaleMinMax{To,From}, val::From) where {To<:Union{Float32,Float64},From<:Real} = 1
map1(mapi::ScaleMinMax{To,From}, val::Union{Real,Complex}) where {To<:Union{Float32,Float64},From<:Real} = 2
end

@test isempty(detect_ambiguities(Ambig6))

module Ambig7
struct T end
(::T)(x::Int8, y) = 1
(::T)(x, y::Int8) = 2
end
@test length(detect_ambiguities(Ambig7)) == 1

module Ambig17648
struct MyArray{T,N} <: AbstractArray{T,N}
    data::Array{T,N}
end

foo(::Type{Array{T,N}}, A::MyArray{T,N}) where {T,N} = A.data
foo(::Type{Array{T,N}}, A::MyArray{T,N}) where {T<:AbstractFloat,N} = A.data
foo(::Type{Array{S,N}}, A::MyArray{T,N}) where {S<:AbstractFloat,N,T<:AbstractFloat} =
    copyto!(Array{S}(undef, unsize(A)), A.data)
foo(::Type{Array{S,N}}, A::AbstractArray{T,N}) where {S<:AbstractFloat,N,T<:AbstractFloat} =
    copyto!(Array{S}(undef, size(A)), A)
end

@test isempty(detect_ambiguities(Ambig17648))

module Ambig8
# complex / unsorted(-able) ambiguities
f(::Union{typeof(pi), Integer}) =  1
f(::Union{AbstractIrrational, Int}) =  2
f(::Irrational) = 3
f(::Signed) = 4
g(::Irrational) = 3
g(::Signed) = 4
g(::Union{typeof(pi), Integer}) =  1
g(::Union{AbstractIrrational, Int}) =  2
struct Irrational2 <: AbstractIrrational; end
end
@test isempty(methods(Ambig8.f, (Int,)))
@test isempty(methods(Ambig8.g, (Int,)))
for f in (Ambig8.f, Ambig8.g)
    @test length(methods(f, (Integer,))) == 2 # 1 is also acceptable
    @test length(methods(f, (Signed,))) == 1 # 2 is also acceptable
    @test length(Base.methods_including_ambiguous(f, (Signed,))) == 2
    @test f(0x00) == 1
    @test f(Ambig8.Irrational2()) == 2
    @test f(MathConstants.γ) == 3
    @test f(Int8(0)) == 4
    @test_throws MethodError f(0)
    @test_throws MethodError f(pi)
end

module Ambig9
f(x::Complex{<:Integer}) = 1
f(x::Complex{<:Rational}) = 2
end
@test !Base.isambiguous(methods(Ambig9.f)..., ambiguous_bottom=false)
@test Base.isambiguous(methods(Ambig9.f)..., ambiguous_bottom=true)
@test !Base.isambiguous(methods(Ambig9.f)...)
@test length(detect_ambiguities(Ambig9, ambiguous_bottom=false)) == 0
@test length(detect_ambiguities(Ambig9, ambiguous_bottom=true)) == 1
@test length(detect_ambiguities(Ambig9)) == 0

# issue #25341
module M25341
_totuple(::Type{Tuple{Vararg{E}}}, itr, s...) where {E} = E
end
@test length(detect_unbound_args(M25341; recursive=true)) == 1

# Test that Core and Base are free of UndefVarErrors
# not using isempty so this prints more information when it fails
@testset "detect_unbound_args in Base and Core" begin
    # TODO: review this list and remove everything between test_broken and test
    let need_to_handle_undef_sparam =
            Set{Method}(detect_unbound_args(Core; recursive=true))
        pop!(need_to_handle_undef_sparam, which(Core.Compiler.eltype, Tuple{Type{Tuple{Any}}}))
        @test_broken need_to_handle_undef_sparam == Set()
        pop!(need_to_handle_undef_sparam, which(Core.Compiler._cat, Tuple{Any, AbstractArray}))
        pop!(need_to_handle_undef_sparam, first(methods(Core.Compiler.same_names)))
        @test need_to_handle_undef_sparam == Set()
    end
    let need_to_handle_undef_sparam =
            Set{Method}(detect_unbound_args(Base; recursive=true))
        pop!(need_to_handle_undef_sparam, which(Base._totuple, (Type{Tuple{Vararg{E}}} where E, Any, Any)))
        pop!(need_to_handle_undef_sparam, which(Base.eltype, Tuple{Type{Tuple{Any}}}))
        pop!(need_to_handle_undef_sparam, first(methods(Base.same_names)))
        @test_broken need_to_handle_undef_sparam == Set()
        pop!(need_to_handle_undef_sparam, which(Base._cat, Tuple{Any, AbstractArray}))
        pop!(need_to_handle_undef_sparam, which(Base.byteenv, (Union{AbstractArray{Pair{T,V}, 1}, Tuple{Vararg{Pair{T,V}}}} where {T<:AbstractString,V},)))
        pop!(need_to_handle_undef_sparam, which(Base.float, Tuple{AbstractArray{Union{Missing, T},N} where {T, N}}))
        pop!(need_to_handle_undef_sparam, which(Base.zero, Tuple{Type{Union{Missing, T}} where T}))
        pop!(need_to_handle_undef_sparam, which(Base.one, Tuple{Type{Union{Missing, T}} where T}))
        pop!(need_to_handle_undef_sparam, which(Base.oneunit, Tuple{Type{Union{Missing, T}} where T}))
        @test need_to_handle_undef_sparam == Set()
    end
end

@testset "has_bottom_parameter with Union{} in tvar bound" begin
    @test Base.has_bottom_parameter(Ref{<:Union{}})
end

# test a case where specificity is not transitive over subtyping
f35983(::T, ::T) where {T} = 1
f35983(::Type, ::Type) = 2
@test f35983(10, 12) == 1
@test f35983(Int32, Int32) == 2
@test f35983(Int32, Int64) == 2
@test f35983(Int32, Complex) == 2
@test only(Base.methods_including_ambiguous(f35983, (Type, Type))).sig == Tuple{typeof(f35983), Type, Type}
@test only(Base.methods(f35983, (Type, Type))).sig == Tuple{typeof(f35983), Type, Type}
@test length(Base.methods_including_ambiguous(f35983, (Any, Any))) == 2
@test first(Base.methods_including_ambiguous(f35983, (Any, Any))).sig == Tuple{typeof(f35983), Type, Type}
@test length(Base.methods(f35983, (Any, Any))) == 2
@test first(Base.methods(f35983, (Any, Any))).sig == Tuple{typeof(f35983), Type, Type}
let ambig = Int32[0]
    ms = Base._methods_by_ftype(Tuple{typeof(f35983), Type, Type}, -1, typemax(UInt), true, UInt[typemin(UInt)], UInt[typemax(UInt)], ambig)
    @test length(ms) == 1
    @test ambig[1] == 0
end
f35983(::Type{Int16}, ::Any) = 3
@test length(Base.methods_including_ambiguous(f35983, (Type, Type))) == 2
@test length(Base.methods(f35983, (Type, Type))) == 2
let ambig = Int32[0]
    ms = Base._methods_by_ftype(Tuple{typeof(f35983), Type, Type}, -1, typemax(UInt), true, UInt[typemin(UInt)], UInt[typemax(UInt)], ambig)
    @test length(ms) == 2
    @test ambig[1] == 1
end


nothing # don't return a module from the remote include
